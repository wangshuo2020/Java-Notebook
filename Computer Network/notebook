1、计算机网络分为哪几层？
物理层、数据链路层、网络层、传输层、应用层。

2、uri和url的区别是什么？
uri的中文是统一资源标识符，作用是唯一标识资源；url的中文是统一资源定位符，作用是用来定位资源。可以把uri理解为身份证，url理解为地址。

3、DNS是什么？作用是什么？
DNS就是域名系统，它的作用是把域名映射为对应的ip地址，解决记忆ip地址的困难。

4、DNS的工作模式是集群式的还是单点式的？
DNS的工作模式是集群式的，全球有13个根域名服务器，分别负责不同的顶级域名服务器，DNS采用的分布式的层次数据库模式，通过数据冗余来解决可能出现的机器故障问题。

5、DNS是怎么工作的？
主机向本地域名服务器的查询采用递归查询，本地域名服务器向根域名服务器的查询采用迭代查询。
具体的工作流程为：
在浏览器中输入域名后，操作系统会先检查本地的hosts文件是否有这个域名的映射关系，如果有，完成域名解析；
如果hosts文件中没有，就去查询本地域名解析器的缓存，如果有，完成域名解析；
如果本地域名解析器的缓存中没有，就去查找本地域名服务器，如果有，完成域名解析；
如果没有，本地域名服务器会向根域名服务器发送查询请求，根域名服务器会告诉本地域名服务器去哪个顶级域名服务器查询；
本地域名服务器向顶级域名服务器发送查询请求，顶级域名服务器会告诉本地域名服务器去哪个权限域名服务器查询；
本地域名服务器向权限域名服务器发送查询请求，权限域名服务器会告诉本地域名服务器域名对应的ip地址；
本地域名服务器告诉主机域名对应的ip地址。

6、ARP协议是什么？
ARP协议是网络层的协议，它的作用是将ip地址转换为mac地址，在每个主机与路由器中，都有一个ARP表，表中存放着ip地址与mac地址的映射关系。

7、ARP的工作流程是什么样的？
在局域网内，主机A向主机B发送数据时，首先会在主机A的ARP缓存表中查询是否有主机B的ip与mac地址的映射关系，如果有，会将mac地址封装到mac帧的首部，并且通过局域网将该mac帧发送到主机B；
如果主机A的ARP缓存表中不存在，那么主机A会在局域网内广播一个ARP请求分组，局域网内所有主机都会接收到这个请求；
如果主机B发现该请求分组中有自己的ip地址，那么主机B会向主机A以单播的形式发送一个带有自己mac地址的响应分组；
主机A在收到主机B的响应分组后会将主机B的ip地址与mac地址写入到主机A的ARP表中；
如果主机A与主机B不在同一个局域网内，要先将mac帧通过路由器转发到主机B所在的局域网，此时主机A的ARP表中存放的不是主机B的ip与主机B的mac地址，而是主机B的ip地址与该通信链路中下一跳路由器的mac地址。假设主机A与主机B由路由器R1与路由器R2相连，具体过程为：主机A会先广播找到路由器R1的mac地址，再由路由器R1广播找到路由器R2的mac地址，最终路由器R2广播找到主机B的mac地址。

8、为什么既要用ip地址也要用mac地址？

9、ping的过程是什么样的？
ping是网际控制报文协议的重要应用，它是网络层的协议。ping的作用是用来测试两台主机是否能够连通。执行ping命令的主机会向目标主机发送多个回送请求报文，目的主机在接收到请求报文后会返回回送报文，根据回送报文返回的时间及成功响应的次数可以估算出数据包的往返时间及丢包率。

10、路由器与交换机之间有什么区别？
路由器属于网络层的设备，它能够识别ip地址，并根据ip地址转发数据包；交换机属于数据链路层的设备，它能够识别mac地址，并根据mac地址转发数据帧。

11、TCP与UDP之间有什么区别？
TCP是面向连接的，UDP是无连接的；TCP是可靠的，UDP是不可靠的；TCP消耗资源多，UDP消耗资源少；TCP是面向字节流传输的，UDP是面向数据报文段传输的；TCP的传输效率低，UDP的传输效率高；TCP主要应用于文件、邮件等发送，UDP主要应用于视频、语音传输；TCP、UDP的首部长度不同，TCP的首部长度为20~60，UDP的首部长度为8；TCP只支持点对点的通信，UDP支持一对一、一对多、多对一、多对多的通信。

12、TCP是如何保证可靠传输的？
主要有校验和、序列号、超时重传、流量控制、拥塞避免等几种方法。
校验和的做法是在发送端和接收端分别计算数据的校验和，如果二者不一致，那么就说明数据在传输过程中出了问题，接收端将丢弃和不确认该报文段。
序列号的做法是对发送的每一个字节进行编号，接收端接收到数据后，会向发送端发送确认应答报文，在该报文中指示着发送端下次发送字节的编号起始位置。
超时重传面对的问题是如果发送方在发送数据后一段时间内没有收到确认应答报文，那么发送方就会重新发送数据。
发送方没有收到确认应答报文可以分为两种情况，发送方发送的数据包就丢失了，接收方在接收到数据包后马上给发送方发送确认应答报文；如果是接收方发送回发送方的确认报文丢失了，那么在重传之后接收端会丢掉发送端重发的数据并且再次发送确认应答报文。
如果重发数据包之后仍然没有接收到接收端发送的确认应答报文，那就继续重发。在不断重发过程中，发送方的等待应答时间以指数倍延长，直到连接被关闭。
流量控制面对的问题是如果发送端发送的数据太快，接收端来不及接收就会出现丢包问题。TCP协议采用滑动窗口来实现流量控制。接收端在收到数据包后发回确认报文时，会将接收端接收数据缓冲区的剩余大小填入报文中，发送方会根据报文中缓冲区的剩余大小来控制发送速度，也就是发送窗口的大小。如果剩余大小为0，发送方就会停止发送数据。
拥塞控制指的是当网络中出现阻塞时，就会出现丢包问题，此时不断的重发数据包，更是加重了网络中的阻塞。解决拥塞问题的一个有效方式就是控制发送方发送数据的速度。
拥塞控制主要由四部分组成：慢开始、拥塞避免、快重传、快恢复。其中慢开始是为了避免一开始就发送大量数据从而造成阻塞，采用的策略是：先初始化cwnd为1，然后大小逐步指数递增；
拥塞避免：因为慢开始阶段cwnd的增加是指数增长的，为了避免cwnd过大，因此设置了一个阈值，当cwnd的值大于等于阈值时，就进入拥塞避免阶段，每次cwnd的值加1，当网络出现了超时，就将阈值设置为此时cwnd值的一半，并将cwnd设置为1；
快重传：当网络出现超时或者阻塞时，可以采用慢开始与拥塞避免来调整。如果只是丢失了某一个报文段，则可以使用快重传方法。根据快重传算法，在丢失某一个报文段时，接收端需要快速向发送端发送前一个报文段的确认报文，发送端在接收到三次前一个报文段的确认报文后，不需要等待重传计时器设置的时间，直接进行丢失报文段的重传。
快恢复：当发送方接收到三个重复的确认报文，就会进行快重传与快恢复。快恢复是指将阈值设置为发生快重传时的cwnd的一半，并且将cwnd设置为阈值，并开始拥塞避免阶段。

13、TCP的三次握手以及四次挥手的具体过程是什么样的？
三次握手的本质是确定发送端和接收端具备收发信息的能力，在能流畅描述三次握手的流程及其中字段的含义同时还需要记住每次握手时接收端与发送端的状态。
发送端有CLOSED、SYN-SENT、ESTABLISHED三种状态，接收端有CLOSED、LISTEN、SYN-RCVD、ESTABLISHED四种状态。
具体过程为：开始客户端与服务端的状态都是CLOSED；
第一次握手：客户端向服务端发起建立连接请求，客户端会随机生成一个序列号x，客户端向服务端发送的字段中包含标志位SYN=1，序列号seq=x。第一次握手前客户端的状态为CLOSED，第一次握手后客户端的状态为SYN-SENT，此时服务端的状态为LISTEN。
第二次握手：服务端在收到客户端发送的报文后，会随机生成一个服务端的序列号y，然后给客户端回复一段报文，其中包括标志位SYN=1，ACK=1，序列号seq=y，确认号ack=x+1。第二次握手前服务端的状态为LISTEN，第二次握手后服务端的状态为SYN-RCVD，此时SYN-SENT。SYN=1表示要和客户端建立一个连接，ACK=1表示确认序列号有效。
第三次握手：客户端收到服务端发送来的报文后，会再次向服务端发送报文，其中包括标志位ACK=1，序列号seq=x+1，确认号ack=y+1。第三次握手前客户端的状态为SYS-SENT，第三次握手后客户端服务端的状态都为ESTABLISHED。

四次挥手
客户端在四次挥手过程中有ESTABLISHED、FIN-WAIT-1、FIN-WAIT-2、TIME-WAIT、CLOSED等五个状态，服务端有ESTABLISHED、CLOSE-WAIT、LAST-ACK、CLOSED等四种状态。
具体过程为：同样假设客户端首先发起的断开连接请求；
第一次挥手：客户端在向服务端发送的数据完成后，向服务端发送释放连接报文，报文包含标志位FIN=1，序列号seq=u。此时客户端只能接收数据，不能向服务端发送数据；
第二次挥手：服务端收到客户端的释放连接报文后，向客户端发送确认报文，包含标志位ACK=1，序列号seq=v，确认号ack=u+1。此时客户端到服务端的连接已经释放掉，客户端不能向服务端发送数据。但服务端到客户端的单向连接还能正常传输数据。
第三次挥手：服务端发送完数据后向客户端发出连接释放报文，报文包含标志位FIN=1，标志位ACK=1，序列号seq=w，确认号ack=u+1。
第四次挥手：客户端收到服务端的连接释放报文，向服务端发送确认报文，报文包含标志位ACK=1，序列号seq=u+1，确认号ack=w+1。

14、为什么TCP握手是3次，而不是2次？
不可以是2次。主要考虑到两种情况：
如果服务端接收到一个很早之前发送的建立连接的请求，会向客户端发送确认报文并建立连接，但是此时客户端并不需要与服务端建立连接，浪费了资源。
如果在第二次握手时服务端向客户端发送的确认报文丢失了，此时客户端认为没有建立连接，服务端认为已经建立了连接，那么服务端就可能会向客户端发送数据，但是客户端接收不到这些数据，同样浪费了资源。

15、为什么TCP挥手是4次？
因为需要确保通信双方都能通知对方释放连接。从四次挥手各自的作用来说，第一次挥手的作用是客户端向服务端请求断开连接，第二次挥手的作用是释放从客户端到服务端的连接，第三次挥手的作用是服务端向客户端请求断开连接，第四次挥手的作用是释放从服务端到客户端的连接。整个过程通信双方都通知了对方释放连接，刚好经过了4次挥手。

16、TIME_WAIT和CLOSE_WAIT的区别在什么地方？
TIME_WAIT是在第四次挥手完成后客户端进入的状态，是主动进入的，CLOSE_WAIT是第二次挥手完成后服务端进入的状态，是被动进入的，是在释放客户端到服务端的连接后服务端进入的状态。

17、HTTP与HTTPS之间有什么区别？
端口号不同，前者是80端口，后者是443端口；安全性不同，前者无加密，安全性较差，后者有加密，安全性较高；资源消耗不同，前者消耗资源少，后者消耗资源多；需要证书情况不同，前者不需要证书，后者需要证书；使用的协议不同，前者基于TCP协议，后者基于SSL协议，其中SSL协议也是基于TCP的。

18、为什么客户端在发出第四次挥手的确认报文后要等2MSL的时间才进入CLOSED状态？换一种问法就是客户端的TIME_WAIT状态有什么用？
MSL的意思是报文的最长寿命，这是为了避免丢包问题，如果第四次挥手发送的报文在传输过程中丢失了，那么服务端没收到客户端的确认报文就会重发第三次挥手的报文。如果客户端发送完确认报文后直接关闭，而这次报文又恰好丢失，服务端就不能正常关闭。

19、如果已经建立了TCP连接，但是客户端出现故障怎么办？连接会一直存在吗？
不会，服务端在过一段时间就会自动关闭连接了。因为TCP协议有一个保活机制，在该机制中主要有三个参数，TCP保活机制的保活时间keepldle，保活探测报文的发送时间间隔keepInterval，保活探测报文的总发送次数keepCount。如果在TCP连接中超过keepIdle的时长没有数据交互时，就会发送保活探测报文，每间隔keepInterval发送一次，如果发送了keepCount次仍然没有收到客户端的响应，服务端则关闭与客户端的TCP连接。

20、从输入网址到显示页面的整个过程是什么样的？
第一步是对输入到浏览器的url进行DNS解析，把域名解析为ip地址；
第二步是浏览器向服务器请求建立TCP连接；
第三步是浏览器向服务器发送http请求；
第四步是服务器处理请求并返回http报文；
第五步是浏览器解析并渲染界面。

21、可以通过四次握手建立连接吗？为什么？
是可以的，四次握手与三次握手的区别在于三次握手中的第二次握手被分成了两次，也就是第二次握手时服务端只发送了ACK与ack，在第三次握手时才发送SYN与初始序列号。为了减少建立连接的时间，将中间两次握手合并为了一次握手。

22、在第三次握手时，客户端会发送ACK到服务端，如果服务端没有收到会发生什么？
如果服务端没有收到来自客户端的ACK确认，服务端会重发之前的SYN和ACK，客户端收到后会重新发送ACK到服务端。重发五次后，如果还没有建立连接，服务端就会自动关闭连接进入CLOSED状态。如果在服务端重发SYN和ACK的时候，客户端向服务端发送了数据并且数据首部中的ACK为1，那么服务端就会读取ACK的值，并且将状态切换为ESTABLISHED。如果客户端在向服务端发送数据时，服务端已经进入了CLOSED状态，服务端就会以RST包应答。

23、在三次握手中出现的初始序列号是什么？有什么用？
初始序列号的作用是以该序列号为起点给要传送的数据进行编号，初始序列号就是作为编号起点的序列号。同时还可以通过序列号确定接收端成功接收了哪些数据，假设初始序列号是1000，接收端向发送端返回了一个值为2001的确认编号，那么就证明接收端已经成功接收到编号为1000-2000的数据。

24、为什么不能将第二次挥手时服务端发送的ACK与第三次挥手时发送的FIN放在一次挥手中发送，从而变成三次挥手？
因为服务端在收到来自客户端断开连接的请求时，从服务端发送到客户端的数据可能没有还没有发送完，把ACK发送回客户端标志着服务端已经收到断开连接的请求，并且断开了客户端到服务端的连接，此时服务端可能仍然在向客户端发送数据，第三次挥手发送的FIN标志着服务端向客户端传输的数据已经完成。如果在一次挥手中同时发送ACK与FIN，那么就可能会出现服务端向客户端传输的数据还没有传输完连接就断开的问题。

25、如果在第二次挥手时，服务端发送的ACK并没有到达客户端，会发生什么？
如果客户端没有接收到来自服务端的确认报文，那么会重新发送FIN，即重新进行第一次挥手。

26、发送端发送数据速度的上限是什么？
发送端发送数据的速度上限是接收窗口和拥塞窗口中的较小值。接收窗口表明了接收端的接受能力，拥塞窗口表明了网络的传输能力。

27、接收窗口是0的时候会怎么样？
如果接收端没有能力接收数据，那么就会将接收窗口设置为0，此时会启动一个持续计时器，到期后会发送一个1字节的探测数据包，来查看接收端的状态，如果此时接收端能够接收数据，就会在返回的报文中更新接收窗口的大小，重新恢复数据传输。

28、无连接是什么意思？
在发送数据之前不需要建立连接。

29、不可靠是什么意思？
接收方在接收到报文后，不需要给出确认。

30、面向字节流与面向报文是什么意思？
面向字节流指的是在发送数据时以字节为单位，一个数据包可以分为若干组进行发送，而面向报文则一次要把一个报文发送完。

31、什么时候使用UDP，什么时候使用TCP？
在游戏、实时视频、在线语音等实时性较强的场景使用UDP，其余大部分情况都是使用TCP。

32、什么是对称加密、什么是非对称加密？它们之间有什么区别？
对称加密指的是加密和解密使用相同的密钥的加密方式。非对称加密指的是用公钥加密，用私钥解密的加密方式。它们之间的区别是对称加密的加密速度更快，适合于给大量数据加密的场景，非对称加密的优势在于安全性更高，因为不需要传输私钥。

33、GET与POST的区别是什么？
GET是幂等的，也就是多次读取同一个资源，得到的结果是一致的，POST不是幂等的；GET的作用是从服务器获取资源，POST的作用是传输实体主体；GET的长度是有限制的，通过POST方式提交的数据大小则没有限制；通过GET方式请求的参数附在URL的后面，通过POST方式请求的参数则放在HTTP的请求体中；GET的安全性较差，POST的安全性相对较高。

34、有哪些常见的HTTP状态码？
以1开头的状态码是信息性状态码，以2开头的是成功状态码，以3开头的是重定向状态码，以4开头的是客户端错误状态码，以5开头的是服务端错误状态码。

35、有哪些常见的协议？它们分别是哪一层的协议？

36、有哪些常见的HTTP方法？
常见的HTTP方法有GET、POST、PUT、DELETE，其中GET的作用是获取服务器中的数据，POST的作用是更新服务器中的数据，PUT的作用是向服务器中添加数据，DELETE的作用是删除服务器中的数据。
